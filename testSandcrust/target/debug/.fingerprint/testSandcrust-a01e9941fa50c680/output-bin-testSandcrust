{"message":"unused `#[macro_use]` import","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":12,"line_start":1,"line_end":1,"column_start":1,"column_end":13,"is_primary":true,"text":[{"text":"#[macro_use]","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `#[macro_use]` import\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[macro_use]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"the trait bound `[u8]: Deserialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/zeerak/.cargo/git/checkouts/sandcrust-c7e0e8d1db3dff02/0de40c5/src/lib.rs","byte_start":30980,"byte_end":30991,"line_start":897,"line_end":897,"column_start":37,"column_end":48,"is_primary":true,"text":[{"text":"\t\tlet $head: $var_type = $sandcrust.restore_var();","highlight_start":37,"highlight_end":48}],"label":"the trait `Deserialize` is not implemented for `[u8]`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/zeerak/.cargo/git/checkouts/sandcrust-c7e0e8d1db3dff02/0de40c5/src/lib.rs","byte_start":51478,"byte_end":51526,"line_start":1458,"line_end":1458,"column_start":5,"column_end":53,"is_primary":false,"text":[{"text":"\t\t\t\tsandcrust_pull_function_args!(sandcrust, $($x)*);","highlight_start":5,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/zeerak/.cargo/git/checkouts/sandcrust-c7e0e8d1db3dff02/0de40c5/src/lib.rs","byte_start":57468,"byte_end":57532,"line_start":1638,"line_end":1638,"column_start":3,"column_end":67,"is_primary":false,"text":[{"text":"\t\tsandcrust_global_create_wrapper!(has_ret, no_vec, fn $f($($x)*));","highlight_start":3,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":1082,"byte_end":1544,"line_start":37,"line_end":57,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"sandbox!{","highlight_start":1,"highlight_end":10},{"text":"\tpub fn uncompress(src: &[u8]) -> Option<Vec<u8>> {","highlight_start":1,"highlight_end":52},{"text":"\t\tunsafe {","highlight_start":1,"highlight_end":11},{"text":"\t\t\tlet srclen = src.len() as size_t;","highlight_start":1,"highlight_end":37},{"text":"\t\t\tlet psrc = src.as_ptr();","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet mut dstlen: size_t = 0;","highlight_start":1,"highlight_end":31},{"text":"\t\t\tsnappy_uncompressed_length(psrc, srclen, &mut dstlen);","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet mut dst = Vec::with_capacity(dstlen as usize);","highlight_start":1,"highlight_end":54},{"text":"\t\t\tlet pdst = dst.as_mut_ptr();","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tif snappy_uncompress(psrc, srclen, pdst, &mut dstlen) == 0 {","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\tdst.set_len(dstlen as usize);","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tSome(dst)","highlight_start":1,"highlight_end":14},{"text":"\t\t\t} else {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tNone","highlight_start":1,"highlight_end":9},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sandbox!","def_site_span":{"file_name":"/home/zeerak/.cargo/git/checkouts/sandcrust-c7e0e8d1db3dff02/0de40c5/src/lib.rs","byte_start":56963,"byte_end":56983,"line_start":1625,"line_end":1625,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! sandbox {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sandcrust_global_create_wrapper!","def_site_span":{"file_name":"/home/zeerak/.cargo/git/checkouts/sandcrust-c7e0e8d1db3dff02/0de40c5/src/lib.rs","byte_start":50005,"byte_end":50049,"line_start":1431,"line_end":1431,"column_start":1,"column_end":45,"is_primary":false,"text":[{"text":"macro_rules! sandcrust_global_create_wrapper {","highlight_start":1,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sandcrust_pull_function_args!","def_site_span":{"file_name":"/home/zeerak/.cargo/git/checkouts/sandcrust-c7e0e8d1db3dff02/0de40c5/src/lib.rs","byte_start":30542,"byte_end":30583,"line_start":888,"line_end":888,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"macro_rules! sandcrust_pull_function_args {","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Deserialize`:\n  [T; 0]\n  [T; 1]\n  [T; 2]\n  [T; 3]\n  [T; 4]\n  [T; 5]\n  [T; 6]\n  [T; 7]\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Sandcrust::restore_var`","code":null,"level":"note","spans":[{"file_name":"/home/zeerak/.cargo/git/checkouts/sandcrust-c7e0e8d1db3dff02/0de40c5/src/lib.rs","byte_start":10256,"byte_end":10276,"line_start":319,"line_end":319,"column_start":24,"column_end":44,"is_primary":true,"text":[{"text":"\tpub fn restore_var<T: ::serde::Deserialize>(&mut self) -> T {","highlight_start":24,"highlight_end":44}],"label":"required by this bound in `Sandcrust::restore_var`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `[u8]: Deserialize` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:37:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msandbox!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn uncompress(src: &[u8]) -> Option<Vec<u8>> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let srclen = src.len() as size_t;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Deserialize` is not implemented for `[u8]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Deserialize`:\u001b[0m\n\u001b[0m              [T; 0]\u001b[0m\n\u001b[0m              [T; 1]\u001b[0m\n\u001b[0m              [T; 2]\u001b[0m\n\u001b[0m              [T; 3]\u001b[0m\n\u001b[0m              [T; 4]\u001b[0m\n\u001b[0m              [T; 5]\u001b[0m\n\u001b[0m              [T; 6]\u001b[0m\n\u001b[0m              [T; 7]\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Sandcrust::restore_var`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/zeerak/.cargo/git/checkouts/sandcrust-c7e0e8d1db3dff02/0de40c5/src/lib.rs:319:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m319\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn restore_var<T: ::serde::Deserialize>(&mut self) -> T {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Sandcrust::restore_var`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `sandcrust_pull_function_args` which comes from the expansion of the macro `sandbox` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `[u8]` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/zeerak/.cargo/git/checkouts/sandcrust-c7e0e8d1db3dff02/0de40c5/src/lib.rs","byte_start":30950,"byte_end":30955,"line_start":897,"line_end":897,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"\t\tlet $head: $var_type = $sandcrust.restore_var();","highlight_start":7,"highlight_end":12}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/zeerak/.cargo/git/checkouts/sandcrust-c7e0e8d1db3dff02/0de40c5/src/lib.rs","byte_start":51478,"byte_end":51526,"line_start":1458,"line_end":1458,"column_start":5,"column_end":53,"is_primary":false,"text":[{"text":"\t\t\t\tsandcrust_pull_function_args!(sandcrust, $($x)*);","highlight_start":5,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/zeerak/.cargo/git/checkouts/sandcrust-c7e0e8d1db3dff02/0de40c5/src/lib.rs","byte_start":57468,"byte_end":57532,"line_start":1638,"line_end":1638,"column_start":3,"column_end":67,"is_primary":false,"text":[{"text":"\t\tsandcrust_global_create_wrapper!(has_ret, no_vec, fn $f($($x)*));","highlight_start":3,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":1082,"byte_end":1544,"line_start":37,"line_end":57,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"sandbox!{","highlight_start":1,"highlight_end":10},{"text":"\tpub fn uncompress(src: &[u8]) -> Option<Vec<u8>> {","highlight_start":1,"highlight_end":52},{"text":"\t\tunsafe {","highlight_start":1,"highlight_end":11},{"text":"\t\t\tlet srclen = src.len() as size_t;","highlight_start":1,"highlight_end":37},{"text":"\t\t\tlet psrc = src.as_ptr();","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet mut dstlen: size_t = 0;","highlight_start":1,"highlight_end":31},{"text":"\t\t\tsnappy_uncompressed_length(psrc, srclen, &mut dstlen);","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet mut dst = Vec::with_capacity(dstlen as usize);","highlight_start":1,"highlight_end":54},{"text":"\t\t\tlet pdst = dst.as_mut_ptr();","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tif snappy_uncompress(psrc, srclen, pdst, &mut dstlen) == 0 {","highlight_start":1,"highlight_end":64},{"text":"\t\t\t\tdst.set_len(dstlen as usize);","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tSome(dst)","highlight_start":1,"highlight_end":14},{"text":"\t\t\t} else {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tNone","highlight_start":1,"highlight_end":9},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sandbox!","def_site_span":{"file_name":"/home/zeerak/.cargo/git/checkouts/sandcrust-c7e0e8d1db3dff02/0de40c5/src/lib.rs","byte_start":56963,"byte_end":56983,"line_start":1625,"line_end":1625,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! sandbox {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sandcrust_global_create_wrapper!","def_site_span":{"file_name":"/home/zeerak/.cargo/git/checkouts/sandcrust-c7e0e8d1db3dff02/0de40c5/src/lib.rs","byte_start":50005,"byte_end":50049,"line_start":1431,"line_end":1431,"column_start":1,"column_end":45,"is_primary":false,"text":[{"text":"macro_rules! sandcrust_global_create_wrapper {","highlight_start":1,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sandcrust_pull_function_args!","def_site_span":{"file_name":"/home/zeerak/.cargo/git/checkouts/sandcrust-c7e0e8d1db3dff02/0de40c5/src/lib.rs","byte_start":30542,"byte_end":30583,"line_start":888,"line_end":888,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"macro_rules! sandcrust_pull_function_args {","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `Sized` is not implemented for `[u8]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"all local variables must have a statically known size","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"unsized locals are gated as an unstable feature","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider borrowing here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1117,"byte_end":1117,"line_start":38,"line_end":38,"column_start":26,"column_end":26,"is_primary":true,"text":[{"text":"\tpub fn uncompress(src: &[u8]) -> Option<Vec<u8>> {","highlight_start":26,"highlight_end":26}],"label":null,"suggested_replacement":"&","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `[u8]` cannot be known at compilation time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:37:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msandbox!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn uncompress(src: &[u8]) -> Option<Vec<u8>> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let srclen = src.len() as size_t;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `Sized` is not implemented for `[u8]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: all local variables must have a statically known size\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: unsized locals are gated as an unstable feature\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `sandcrust_pull_function_args` which comes from the expansion of the macro `sandbox` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider borrowing here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn uncompress(src: &\u001b[0m\u001b[0m\u001b[38;5;10m&\u001b[0m\u001b[0m[u8]) -> Option<Vec<u8>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
